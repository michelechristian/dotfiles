# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from typing import List  # noqa: F401

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

from libqtile import hook, extension

import os
import subprocess


@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.call([home])

mod = "mod4"
terminal = guess_terminal()

keys = [
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(),
        desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(),
        desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(),
        desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(),
        desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),

    Key([mod, "control"], "r", lazy.restart(), desc="Restart Qtile"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    #Key([mod], "r", lazy.spawncmd(),
    #    desc="Spawn a command using a prompt widget"),
    Key([mod], "r", lazy.run_extension(extension.DmenuRun()), desc="Dmenu Run"),
    Key([mod], "d", lazy.spawn("rofi -show drun -modi drun -show-icons -columns 2"), desc="Launch rofi"),
    Key([mod], "slash", lazy.spawn("rofi -show window -show-icons"), desc="Launch window switcher"),
    Key(["mod1"], "Tab", lazy.run_extension(extension.WindowList(item_format="{group}: {window}")), desc="Launch window switcher"),
]

groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen(),
            desc="Switch to group {}".format(i.name)),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True),
            desc="Switch to & move focused window to group {}".format(i.name)),
        # Or, use below if you prefer not to switch to that group.
        # # mod1 + shift + letter of group = move focused window to group
        # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
        #     desc="move focused window to group {}".format(i.name)),
    ])

layout_theme = {"border_width": 3,
                "margin": 8,
                "border_focus": "#ffffff",
                "border_normal": "#4c566a"
                }

layouts = [
    # layout.Columns(border_focus_stack='#d75f5f', margin=5),
    layout.MonadTall(**layout_theme, new_client_position='top'),
    layout.Bsp(**layout_theme, fair=False),
    layout.Max(),
    # layout.Floating(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(**layout_theme),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

colors =  [#["#434c5e", "#434c5e"], # color 0
        ["#293136", "#293136"],
        ["#3b4252", "#3b4252"], # color 1
        ["#8c8c8c", "#8c8c8c"], # color 2
        ["#565b78", "#565b78"], # color 3
        ["#a1acff", "#a1acff"], # color 4
        ["#ffffff", "#ffffff"], # color 5
        ["#9293d2", "#9293d2"], # color 6
        ["#89b8fd", "#89b8fd"], # color 7
        ["#e2c5dc", "#e2c5dc"], # color 8
        ["#0ee9af", "#0ee9af"]] # color 9



widget_defaults = dict(
    font='Font Awesome 5 Free',
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        wallpaper='/usr/share/backgrounds/manjaro-wallpapers-18.0/manjaro-cat.jpg',
        wallpaper_mode='fill',
        top=bar.Bar(
            [
                widget.Sep(
                    background=colors[0],
                    padding=5,
                    linewidth=0
                ),
                widget.GroupBox(
                    fontsize=12,
                    margin_y=3,
                    margin_x=2,
                    padding_y=5,
                    padding_x=5,
                    borderwidth=4,
                    active=colors[5],
                    inactive="#bfbfbf",
                    rounded=True,
                    highlight_color=colors[1],
                    highlight_method="line",
                    this_current_screen_border=colors[4],
                    this_screen_border=colors[6],
                    other_current_screen_border=colors[1],
                    other_screen_border=colors[1],
                    foreground=colors[8],
                    background=colors[0],
                ),
                widget.Sep(
                    linewidth=4,
                    padding=10,
                    foreground=colors[5],
                    background=colors[0]
                ),
                # widget.WindowList(),
                                
                widget.Prompt(
                    background=colors[8],
                    foreground=colors[0],
                    fontsize=14
                ),
                widget.Spacer(
                    background=colors[0]
                ),
                
                # widget.WindowTabs(),
		        # widget.TaskList(max_title_width=128),
                widget.Chord(
                    chords_colors={
                        'launch': ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                # widget.TextBox("default config", name="default"),
                # widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                # widget.Volume(),

                widget.TextBox(
                   text = 'ïƒ™',
                   background = colors[0],
                   foreground = colors[8],
                   padding = 0,
                   fontsize = 30
                ),
                widget.TextBox(
                   text = " ðŸ–¬",
                   foreground = colors[1],
                   background = colors[8],
                   padding = 0,
                   fontsize = 18
                ),
                widget.Memory(
                    background=colors[8],
                    foreground=colors[1],
                    # font="novamono for powerline",
                    mouse_callbacks = {'Button1': lambda: qtile.cmdspawn('xterm -e htop')},
                    fontsize=14,
                    format='{MemUsed: .0f} MB',
                ),
                widget.TextBox(
                   text = 'ïƒ™',
                   foreground = colors[3],
                   background = colors[8],
                   padding = 0,
                   fontsize = 30
                 ),
                widget.CurrentLayoutIcon(
                   # custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                   foreground = colors[1],
                   background = "#565b78",
                   padding = 0,
                   scale = 0.7
                ),

                widget.CurrentLayout(
                    #font = "anonymous pro for powerline bold",
                    # font = "novamono for powerline",
                    fontsize = 15,
                    foreground = colors[5],
                    background = colors[3]
                ),

                widget.TextBox(
                   text = 'ïƒ™',
                   background = colors[3],
                   foreground = colors[6],
                   padding = 0,
                   fontsize = 30
                ),
                widget.Systray(
                    background=colors[6],
                    icons_size=20,
                    padding=4
                ),
                widget.Sep(linewidth = 0,
                    padding = 6,
                    foreground = colors[5],
                    background=colors[6],
                ),
                widget.TextBox(
                    text = 'ïƒ™',
                    background = colors[6],
                    foreground = colors[1],
                    padding = 0,
                    fontsize = 30
                ),                
                widget.Volume(
                    background = colors[1],
                    foreground = colors[5],
                    # font="Novamono for Powerline",
                    fontsize = 14,
                    mouse_callbacks = {'Button3': lambda: lazy.spawn("pavucontrol")},
                    ),
                widget.Sep(
                    linewidth = 0,
                    padding = 0,
                    background = colors[6],
                ),
#                widget.TextBox(
#                    text = 'ïƒ™',
#                    background = colors[6],
#                    foreground = colors[4],
#                    padding = 0,
#                    fontsize = 60
#                ),
#                widget.TextBox(
#                    text='ï‰€ ',
#                    fontsize='16',
#                    background=colors[4],
#                    foreground=colors[1],
#                ),
#                widget.Battery(
#                    background=colors[4],
#                    foreground=colors[1],
#                    charge_char='â†‘',
#                    discharge_char='â†“',
#                    # font="comic sans ms bold",
#                    fontsize=13,
#                    update_interval=1,
#                    format='{percent:2.0%}'
#                ),
                widget.TextBox(
                    text = 'ïƒ™',
                    background = colors[1],
                    foreground = colors[6],
                    padding = 0,
                    fontsize = 30
                ),
                widget.Clock(
                    foreground = colors[5],
                    background = colors[6],
                    fontsize = 14,
                    format='%a, %d %B %Y | %H:%M',
                ),
                widget.Sep(
                    padding = 10,
                    linewidth = 0,
                    background = colors[6],
                    foreground = colors[6],
                    ),                
            ],
            24,
            opacity=0.9,
            background=colors[1],
            margin=[8,20,0,20]                
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None  # WARNING: this is deprecated and will be removed soon
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
